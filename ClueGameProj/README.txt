Link for youtube: https://www.youtube.com/watch?v=275-lyWd5IQ&feature=youtu.be&ab_channel=cypriendzialo
I will be writing about the main function of my project 2 since the rest of the code will be explained through comments. To start in main, I create six "Item" pointers, five "Character" pointers, and nine "Room pointers". These pointers are the representation of the necessary items, characters, and rooms that will be used throughout the game. I will not list all the characters, rooms, and items, because they are very visible in the code. Next, I create array pointers, one for the "Room" structure that has a size of 9, one of the "Character" structure that has a size of 5, and one for the "Item structure" that has a size of 6. These arrays will be used later on in the code. I also created a 2-dimensional array of "Room" pointers (3x3) to represent the gameboard, and fill this array with the room pointers I created before. This will be used later as well. Next, I create a pointer to the "Answer " structure, but I do not fill in any of the components of the Answer structure since they will be randomly chosen later. After I create an "Avatar" structure pointer that will represent the player, I, therefore, call the pointer "player". Now, I apply the "shuffle_board" function on the game board (board) so that the rooms of the gameboard are randomly ordered. I then use the "shuffle_characters" function on the "Character" array. This causes the array holding the "Character" pointers to have a randomized order of the "Character" pointers. I then do the same thing with the "Item" pointers in the "Item" array, but I use the "shuffle_items" function to do this. Now that I have a randomized array of characters and items. I then place each character and item on a location on the game board 2-d "Room" pointer array. Since the rooms, items, and characters are randomly ordered each playthrough, the game will be different each time, with different characters and items in different rooms. Next, I connect all the rooms of the 2-d array using the "connect_map" function. This function connects the rooms by setting the North, South, East, and West of each room. After this, I randomly choose an answer from the game board with the "theAnswer" function. After this, I place the avatar in a random room with the place_player function. This function simply chooses a random index on the 2d board and places the avatar pointer in one of the rooms. I now create a while loop to check if the game is over. This is done by checking if the "isAnswer" int variable 0. If so, then the game is over. Within this while loop I create a char pointer that will hold the player’s typed command. This char is called "buffer".  I then use the "getline" function given from an include statement of stdlib to hold the player’s input. I then check if "buffer"  is NULL, if it is the program terminates, else I continue. I then check if the buffer is equal to any of the names of the commands that a player can choose by comparing the two strings of the command and the command name with "strncmp". If one of the commands was written, then the "strncmp" will pick it up and the function related to that command is done. Since there are so many commands, I will not go over each one. But for an example, if the player types in go NORTH, then the command sending the avatar to the north room is done. Eventually, the player will type in enough clue commands where the game comes to either a win or a loss. A loss is determined if the int variable "numGuesses"  >= 10 and the semi boolean/int variable "isAnswer" does not equal 0, signify the three matches for the answer weren’t found. A win is determined if the three "Answer" struct variables were matched. The figuring out of these cases are done within other functions, so I will not go over this. Finally, I free all the pointers I used. 

